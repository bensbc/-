基础学习 -> 模块学习 -> 架构学习、算法学习、团队合作
基础学习：基础的片上外设，通信协议等
模块学习：电赛常用的模块，比如陀螺仪、测距模块、视觉模块等
架构学习：用所学的模块组合成一个项目，可找往年的电赛题练习，学习如何将许多模块组合起来、处理模块之间的冲突、任务调度
算法学习：PID算法、滤波算法、视觉处理相关算法等
团队合作：与队友一起做一个项目，学习如何分配任务、相互配合

	对于控制类题目（非视觉部分），可分成基础、模块、架构、算法、团队合作五个部分进行学习。
	首先是基础部分。这个部分中要学习C语言、数据结构（数组、链表、队列、栈，以及排序算法）以及单片机（STM32，后续可能还要学TI芯片），以掌握C语言语法和编程规范、学习片上外设和通信协议为主。大概达到以下程度：能够看懂厂家给的示例代码，遇到问题时能通过调试找到相应的错误。更进阶的可学习根据手册自己编写驱动代码，学习3D建模、绘制PCB和电路板焊接，这样能摆脱对面包板的依赖，实现特定的需求。
	第二个是模块部分。这个部分主要学习电赛常用的模块，比如电机、陀螺仪、测距模块、显示屏等，有些模块可能在基础部分就已经学过，可进一步挖掘模块的功能、学习不同厂家的模块等，要熟悉模块的性能和特点，以便比赛时能正确选用。
	第三个是架构学习。这个部分主要学习如何将多个模块组合起来、处理模块之间的冲突以及任务调度。之前学习的可能只是涉及少量模块的调试，在比赛或项目中，涉及到的模块可能达到4、5个甚至更多，这种情况下，模块之间可能会产生冲突（比如引脚冲突、调度冲突等），所以在这一部分中，要学会用学过的模块搭建一个项目，或找往年的控制类电赛题练习，锻炼自己从宏观的视角实现模块的组合和任务的调度，而不是只是针对一两个模块。如果你在基础部分中学习了绘制PCB和电路板焊接的进阶内容，在此处就可以设计自己的项目需求，绘制电路板和3D模型，用几个星期的时间制作一些好玩的东西，慢慢打磨出自己的成品，在“踩坑”的过程中逐渐成长。
	第四个是算法学习。相信通过前三部分的学习，你已经能够处理好多个模块的组合和调度，并完成自己设计的项目。接下来要做的是考虑程序的性能，比如，为元素较多的数组排序时，可以使用更高级的排序算法。以前所用的数组的元素个数可能只有几十个，最多可能就一两百个，这个情况下使用以前在C语言中学到的冒泡排序就能实现排序需求，且不会占用太多时间。但如果数据元素多达几万个甚至几十万个的时候，再使用这种简单的排序算法就会占用很多时间，可能导致程序阻塞，不能达到性能需求，因此学习更高级的算法很有必要。除了排序算法，还有滤波算法、PID算法等。当你用ADC采集某个模块输出的电压时，电压值可能会经常有波动，导致测量结果不稳定，这个时候可以在软件上加一些滤波来使测量值更加稳定。PID算法是控制类题目中经常要使用到的，无论是做平衡车、倒立摆，还是四轮车的偏航角闭环、车速的调整，都需要用到PID算法。关于PID算法的学习，你可以到CSDN上找一些关于PID原理的文章，或者到bilibili上看PID讲解视频（比如江科大的PID讲解），尝试做一辆平衡车或者倒立摆，掌握好PID算法的基本原理和参数的调节方法。
	第五个是团队合作。电赛不只是一个人的事情，而是团队内部的相互协作。在这一部分中，你需要学会与队友完成一个项目，可以找往年电赛题目练习，主要掌握团队的交流与协作，涉及项目功能和架构的确定、模块的选型、任务的分配、版本的更新迭代等。